type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public abstract class Contact {
        private String name;
        private String number;
        private final LocalDateTime creationDateTime;
        private LocalDateTime editDateTime;

        public Contact(String name, String number) {
            this.name = name;
            setNumber(number);
            this.creationDateTime = LocalDateTime.now().withSecond(0).withNano(0);
            this.editDateTime = LocalDateTime.now().withSecond(0).withNano(0);

        }

        public String getName() {
            return name;
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {

            if (checkNumber(number)) {
                this.number = number;
            } else {
                System.out.println("Wrong number format!");
                this.number = "";
            }
        }

        public LocalDateTime getCreationDateTime() {
            return creationDateTime;
        }

        public LocalDateTime getEditDateTime() {
            return editDateTime;
        }

        public void setEditDateTime(LocalDateTime editDateTime) {
            this.editDateTime = editDateTime;
        }

        public void setName(String name) {
            this.name = name;
        }

        private boolean checkNumber(String number) {
            return number.matches(
                    "([+])?((\\w+[ -]\\w{2,})|(\\(\\w+\\)[ -]\\w{2,})|(\\w+[ -]\\(\\w{2,}\\))|(\\w+)|(\\(\\w+\\)))" +
                            "([ -]\\w{2,})*");
        }

        public String print() {
            return name;
        }

        @Override
        public String toString() {
            return "Number: " + getNumber() + "\n"
                    + "Time created: " + getCreationDateTime() + "\n"
                    + "Time last edit: " + getEditDateTime();
        }

        public void setSurname(String surname) {
        }

        public void setBirthDay(String value) {
        }

        public void setGender(String value) {
        }

        public void setAddress(String value) {
        }
    }
  learner_created: true
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.io.*;
    import java.time.LocalDateTime;
    import java.util.ArrayList;

    public class PhoneBook {
        private final ArrayList<Contact> phoneBook = new ArrayList<>();

    //    public PhoneBook() {
    //        phoneBook = loadFromFile();
    //    }

        public void add(Contact contact) {
            phoneBook.add(contact);
        }

        public int size() {
            return phoneBook.size();
        }

        public void print() {
            print(phoneBook);
        }

        public void print(ArrayList<Contact> contacts) {
            int i = 1;
            for (Contact c : contacts) {
                System.out.println(i + ". " + c.print());
                i++;
            }
        }

        public void remove(int index) {
            phoneBook.remove(index - 1);
            //saveToFile();
        }

        public Contact get(int index) {
            return phoneBook.get(index - 1);
        }

        public void editContact(int i, String field, String value) {
            Contact contact = get(i);
            contact.setEditDateTime(LocalDateTime.now().withSecond(0).withNano(0));
            switch (field) {
                case "name":
                    contact.setName(value);
                    break;
                case "surname":
                    contact.setSurname(value);
                    break;
                case "number":
                    contact.setNumber(value);
                    break;
                case "birth":
                    contact.setBirthDay(value);
                    break;
                case "gender":
                    contact.setGender(value);
                case "address":
                    contact.setAddress(value);
                    break;
            }
            //saveToFile();
            System.out.println("The record updated!");
        }

        public ArrayList<Contact> search(String phrase) {
            ArrayList<Contact> contacts = new ArrayList<>();
            for (Contact c : phoneBook) {
                if (c.toString().toLowerCase().contains(phrase.toLowerCase())) {
                    contacts.add(c);
                }
            }
            return contacts;
        }

    //    private void saveToFile() {
    //        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File("phonebook.db")));) {
    //            oos.writeObject(phoneBook);
    //        } catch (IOException e) {
    //            e.printStackTrace();
    //        }
    //    }
    //
    //    private ArrayList<Contact> loadFromFile() {
    //        ArrayList<Contact> contacts;
    //        try {
    //            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File("phonebook.db")));
    //            contacts = (ArrayList<Contact>) ois.readObject();
    //        } catch (IOException | ClassNotFoundException e) {
    //            contacts = new ArrayList<>();
    //            e.printStackTrace();
    //        }
    //        return contacts;
    //    }
    }
  learner_created: true
- name: src/contacts/ContactPerson.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;

    public class ContactPerson extends Contact {
        private String surname;
        private String gender;
        private LocalDate birthDay;

        public ContactPerson(String name, String number, String surname, String gender, LocalDate birthDay) {
            super(name, number);
            this.surname = surname;
            this.gender = gender;
            this.birthDay = birthDay;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public void setGender(String gender) {
            if (gender.matches("^[MF]$")) {
                this.gender = gender;
            } else {
                this.gender = null;
            }
        }

        public void setBirthDay(LocalDate birthDay) {
            this.birthDay = birthDay;
        }

        public void setBirthDay(String birtDay) {
            LocalDate date = null;
            try {
                date = LocalDate.parse(birtDay, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            } catch (Exception e) {
                System.out.println("Wrong birth date");
                e.printStackTrace();
            }
            setBirthDay(date);
        }

        @Override
        public String toString() {
            return "Name: " + getName() + "\n"
                    + "Surname: " + this.surname + "\n"
                    + "Birth date: " + (this.birthDay == null ? "[no data]" : this.birthDay) + "\n"
                    + "Gender: " + (this.gender == null ? "[no data]" : this.gender) + "\n"
                    + super.toString();

        }

        public String print() {
            return getName() + " " + this.surname;
        }
    }
  learner_created: true
- name: src/contacts/ContactCompany.java
  visible: true
  text: |
    package contacts;

    public class ContactCompany extends Contact {
        private String address;

        public ContactCompany(String name, String number, String address) {
            super(name, number);
            this.address = address;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        @Override
        public String toString() {
            return "Organization name: " + getName() + "\n"
                    + "Address: " + this.address + "\n"
                    + super.toString();
        }

    }
  learner_created: true
- name: src/contacts/UserInterface.java
  visible: true
  text: |+
    package contacts;

    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;
    import java.util.ArrayList;
    import java.util.Scanner;

    import static java.lang.System.exit;

    public class UserInterface {
        private final Scanner scanner;
        private final PhoneBook contacts;

        public UserInterface() {
            scanner = new Scanner(System.in);
            contacts = new PhoneBook();
        }

        public void start() {

            label:
            while (true) {
                //System.out.println("[menu]Enter action (add, list, search, count, exit): ");
                System.out.println("Enter action (add, remove, edit, count, info, exit):");
                String input = scanner.nextLine();
                switch (input) {
                    case "add":
                        System.out.println("Enter the type (person, organization):");
                        String add = scanner.nextLine();
                        if ("person".equals(add)) {
                            addPerson();
                        } else if ("organization".equals(add)) {
                            addOrganization();
                        }
                        break;


                    case "remove":
                        if (contacts.size() == 0) {
                            System.out.println("No records to remove");
                        } else {
                            remove();
                        }

                        break;


                    case "edit":

                        if (contacts.size() == 0) {
                            //exit(0);
                            System.out.println("No records to edit");

                        } else {
                            System.out.println("Select a record: ");
                            contacts.print();
                            String ss = scanner.nextLine();
                            int i = Integer.parseInt(ss);
                            editUI(i);


                            //contacts.print();
                        }


                        break;

                    //case "list":
                    case "info":
                        if (contacts.size() == 0) {
                            System.out.println("The Phone Book has " + contacts.size() + " records.");
                        } else {
                            System.out.println("Enter index to show info: ");
                            contacts.print();
                            String ss = scanner.nextLine();
                            int i = Integer.parseInt(ss);
                            recordUI(i);
                            //listUI();

                            //contacts.print();
                        }


                        break;
                    case "count":
                        System.out.println("The Phone Book has " + contacts.size() + " records.");
                        break;

    //                case "search":
    //                    searchUI();
    //                    break;

                    case "exit":
                        break label;


                }


                System.out.println();
            }
        }

        private void listUI() {
            contacts.print();
            //while (true) {
            //System.out.println("\n[list] Enter action ([number], back):");

                String input = scanner.nextLine();
                if ("back".equals(input)) {
                   // break;
                }
                try {
                    int i = Integer.parseInt(input);
                    recordUI(i);


                    //break;
                } catch (Exception e) {
                    //e.printStackTrace();
                }
            //}
        }

        private void searchUI() {
            System.out.println("Enter search query:");
            ArrayList<Contact> c = contacts.search(scanner.nextLine());
            System.out.println("Found " + c.size() + " results:");
            contacts.print(c);

            while (true) {
                System.out.println("\n[search] Enter action ([number], back, again):");
                String input = scanner.nextLine();
                if ("back".equals(input)) {
                    break;
                } else if ("again".equals(input)) {
                    System.out.println("Enter search query:");
                    c = contacts.search(scanner.nextLine());
                    System.out.println("Found " + c.size() + " results:");
                    contacts.print(c);
                } else {
                    try {
                        int i = Integer.parseInt(input);
                        recordUI(i);
                        break;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        private void recordUI(int i) {
            System.out.println(contacts.get(i));
    //        label:
    //        while (true) {
    //            System.out.println("\n[record] Enter action (edit, delete, menu):");
    //            String input = scanner.nextLine();
    //            switch (input) {
    //                case "edit":
    //                    editUI(i);
    //                    break;
    //                case "delete":
    //                    contacts.remove(i);
    //                    break;
    //                case "menu":
    //                    break label;
    //            }
    //        }
        }

        private void editUI(int i) {
            if (contacts.get(i).getClass() == ContactPerson.class) {
                System.out.println("Select a field (name, surname, birth, gender, number):");
                String field = scanner.nextLine();
                String value = getValueUI(field);
                contacts.editContact(i, field, value);
            } else if (contacts.get(i).getClass() == ContactCompany.class) {
                System.out.println("Select a field (name, address, number):");
                String field = scanner.nextLine();
                String value = getValueUI(field);
                contacts.editContact(i, field, value);
            }
            System.out.println("Saved");
            System.out.println(contacts.get(i));
        }

        private String getValueUI(String field) {
            switch (field) {
                case "name":
                    System.out.println("Enter name:");
                    break;
                case "surname":
                    System.out.println("Enter surname:");
                    break;
                case "number":
                    System.out.println("Enter number:");
                    break;
                case "birth":
                    System.out.println("Enter date of birth");
                    break;
                case "gender":
                    System.out.println("Enter gender:");
                    break;
                case "address":
                    System.out.println("Enter address:");
                    break;
            }
            return scanner.nextLine();
        }

        private void addPerson() {
            System.out.println("Enter the name:");
            String name = scanner.nextLine();
            System.out.println("Enter the surname:");
            String surname = scanner.nextLine();
            System.out.println("Enter the birth date:");
            String DOB = scanner.nextLine();
            LocalDate date = setDate(DOB);
            System.out.println("Enter the Gender(M,F)");
            String gender = scanner.nextLine();
            if (!gender.matches("^[MF]$")) {
                gender = null;
                System.out.println("Bad Gender!");
            }
            System.out.println("Enter the number:");
            String number = scanner.nextLine();
            contacts.add(new ContactPerson(name, number, surname, gender, date));
            System.out.println("The record added.");
        }

        private LocalDate setDate(String DOB) {
            LocalDate date;
            try {
                date = LocalDate.parse(DOB, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            } catch (Exception e) {
                date = null;
                System.out.println("Bad birth date!");
                e.printStackTrace();
            }
            return date;
        }

        private void addOrganization() {
            System.out.println("Enter the organization name:");
            String name = scanner.nextLine();
            System.out.println("Enter the address:");
            String address = scanner.nextLine();
            System.out.println("Enter the number:");
            String number = scanner.nextLine();
            contacts.add(new ContactCompany(name, number, address));
            System.out.println("The record added.");
        }

        private void remove() {
            System.out.println("Select a record:");
            String remove = scanner.nextLine();
            contacts.remove(Integer.parseInt(remove));
            System.out.println("The record removed!");
        }
    }


  learner_created: true
- name: phonebook.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5327#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 29 Apr 2022 08:07:09 UTC
record: -1
